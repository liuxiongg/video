var m = {
	init: function() {},
	brower: function() {
		var isFF = 0,
		ischrome = 0;
		var ua = navigator.userAgent.toLowerCase();
		if (ua.indexOf("firefox") > 0) {
			return 'ff';
		}
		if (ua.indexOf("chrome") > 0) {
			return 'chrome';
		}
		var Sys = {};
		var s; (s = ua.match(/msie ([\d.]+)/)) ? Sys.ie = s[1] : 0;
		var browerVersion = 0;
		if (Sys.ie) {
			browerVersion = 'IE' + Sys.ie;
			browerVersion = browerVersion.substr(0, 3);
			if (browerVersion == 'IE9') {
				return 'ie9';
			}
		}
		return '';
	},
	g: function(_id) {
		return document.getElementById(_id);
	},
	c: function(_tag) {
		return document.createElement(_tag);
	},
	hide: function(_obj) {
		//console.log();
		if (_obj != null)
		{
			_obj.style.display = 'none';
		}
	},
	show: function(_obj) {
		if (_obj != null)
		{
			_obj.style.display = 'block';
		}
	},
	insertAfter: function(newElement, targetElement) {
		var parent = targetElement.parentNode;
		if (parent.lastChild == targetElement) {
			parent.appendChild(newElement);
		} else {
			parent.insertBefore(newElement, targetElement.nextSibling);
		}
	},
	loadJs: function(url) {
		var b = this.brower();
		if (typeof arguments[1] != 'undefined') {
			var jsid = arguments[1];
		}
		if (b == 'chrome' || b == 'ie9') {
			var _dh = document.createElement("script");
			_dh.setAttribute("type", "text/javascript");
			_dh.setAttribute("src", url);
			document.getElementsByTagName("head")[0].appendChild(_dh);
		} else if (b == 'ff') {
			var _dh = document.createElement("script");
			_dh.setAttribute("type", "text/javascript");
			_dh.setAttribute("src", url);
			_dh.setAttribute("id", 'tmp_ajax_js');
			document.getElementsByTagName("head")[0].appendChild(_dh);
			document.getElementsByTagName("head")[0].removeChild(document.getElementById("tmp_ajax_js"));
		} else {
			if (typeof m.g(jsid) != 'undefined') {
				try {
					m.g(jsid).src = url;
				} catch(e) {
					var _dh = document.createElement("script");
					_dh.setAttribute("type", "text/javascript");
					_dh.setAttribute("src", url);
					if (typeof arguments[1] != 'undefined') {
						_dh.setAttribute("id", jsid);
					}
					document.getElementsByTagName("head")[0].appendChild(_dh);
				}
			}
		}
		return true;
	},
	ajax: {
		xhr: null,
		initXhr: function() {
			if (window.XMLHttpRequest) {
				try {
					this.xhr = new XMLHttpRequest();
				} catch(e) {
					this.xhr = false;
				}
			} else if (window.ActiveXObject) {
				try {
					this.xhr = new ActiveXObject("Msxml2.XMLHTTP");
				} catch(e) {
					try {
						this.xhr = new ActiveXObject("Microsoft.XMLHTTP");
					} catch(e) {
						this.xhr = false;
					}
				}
			}
		},
		get: function(url, call_back) {
			this.request('get', null, url, call_back);
		},
		post: function(method, args, url, cation) {
			this.request(method, args, url, cation);
		},
		request: function(method, args, url, cation) {
			if (cation == null) {
				cation = function() {};
			}
			this.initXhr();
			var xmlhttp = this.xhr;;
			xmlhttp.open(method, url, true);
			if (method == 'post') {
				var arg_str = '';
				for (key in args) {
					arg_str += key + '=' + encodeURIComponent(args[key]) + '&';
				}
				arg_str = arg_str.substr(0, arg_str.length - 1);
				args = arg_str;
				xmlhttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;");
			}
			xmlhttp.onreadystatechange = function() {
				if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
					cation(xmlhttp.responseText);
				}
			};
			xmlhttp.send(args);
		}
	},
	xcookie: function(name, val, expire, host) {
		if (typeof(val) != 'undefined') {
			expire = expire ? expire: '';
			if (expire) {
				expire = new Date((new Date()).getTime() + expire * 3600000);
				expire = '; expires=' + expire.toGMTString();
			}
			host = host ? host: location.host.replace('www', '');
			document.cookie = name + '=' + escape(val) + expire + ';path=/;domain=' + host;
		} else {
			var cookieValue = '';
			var search = name + '=';
			if (document.cookie.length > 0) {
				offset = document.cookie.indexOf(search);
				if (offset != -1) {
					offset += search.length;
					end = document.cookie.indexOf(';', offset);
					if (end == -1) end = document.cookie.length;
					cookieValue = unescape(document.cookie.substring(offset, end));
				}
			}
			return cookieValue;
		}
	}
}
String.prototype.trim = function() {
	return this.replace(/(^\s*)|(\s*$)/g, "");
};
String.prototype.cnSize = function() {
	var arr = this.match(/[^\x00-\xff]/ig);
	return this.length + (arr == null ? 0 : arr.length);
};
String.prototype.cutStr = function(maxLength) {
	var cnlen = this.cnSize();
	var len = this.length;
	if (cnlen <= maxLength) {
		return this;
	}
	var lenCount = 0;
	var rs = '';
	var word = ''
	for (var i = 0; i < len; i++) {
		word = this.substr(i, 1);
		if (word.match(/[^\x00-\xff]/ig) === null) {
			lenCount++;
			rs += word.toString();
			if (lenCount == maxLength) {
				return rs;
			}
		} else {
			lenCount = lenCount + 2;
			if (lenCount > maxLength) {
				return rs;
			}
			rs += word.toString();
			if (lenCount == maxLength) {
				return rs;
			}
		}
	}
}
var concat = {
	data: [],
	init: function() {
		this.data = [];
	},
	append: function() {
		for (var i = 0; i < arguments.length; i++) {
			this.data.push(arguments[i]);
		}
	},
	out: function() {
		var re = this.data.join('');
		this.init();
		return re;
	}
}
function SetHome(obj, vrl) {
	var notSetHomePage1 = new RegExp("Maxthon");
	var notSetHomePage2 = new RegExp("TheWorld");
	var notSetHomePage3 = new RegExp("TencentTraveler");
	var notSetHomePage4 = new RegExp("MetaSr");
	var is360 = false;
	try {
		if (window.external && window.external.twGetRunPath) {
			var r = external.twGetRunPath();
			if (r && r.toLowerCase().indexOf("360") > -1) {
				is360 = true;
			}
		}
	} catch(e) {
		is360 = false;
	}
	var nVersion = navigator.appVersion;
	if (navigator.userAgent.indexOf('MSIE') >= 0 && !notSetHomePage1.test(nVersion) && !notSetHomePage2.test(nVersion) && !notSetHomePage3.test(nVersion) && !notSetHomePage4.test(nVersion) && !is360) {
		obj.style.behavior = 'url(#default#homepage)';
		obj.setHomePage(vrl);
	} else {
		window.open("http://www.2345.com/help/repair.htm")
	}
}
function add_fav() {
	var title = '电影大全-2345.com_网址导航';
	var url = 'http://dianying.2345.com/';
	try {
		window.external.addFavorite(url, title);
	} catch(e) {
		try {
			window.sidebar.addPanel(title, url, "");
		} catch(e) {
			alert("\u60a8\u53ef\u4ee5\u5c1d\u8bd5\u901a\u8fc7\u5feb\u6377\u952e Ctrl+D \u52a0\u5165\u5230\u6536\u85cf\u5939~");
		}
	}
}
var xloadImg = {
	loaded: [],
	t: function(obj, tag) {
		return obj ? obj.getElementsByTagName(tag) : [];
	},
	id: function(id) {
		return document.getElementById(id);
	},
	n: function(name) {
		return document.getElementsByName(name);
	},
	getDomObjABSX: function(elem) {
		return elem.offsetParent ? elem.offsetLeft + this.getDomObjABSX(elem.offsetParent) : elem.offsetLeft;
	},
	getDomObjABSY: function(elem) {
		return elem.offsetParent ? elem.offsetTop + this.getDomObjABSY(elem.offsetParent) : elem.offsetTop;
	},
	getRelativeParentX: function(elem) {
		return elem.offsetParent == elem.parentNode ? elem.offsetLeft: this.getDomObjABSX(elem) - this.getDomObjABSX(elem.parentNode);
	},
	getRelativeParentY: function(elem) {
		return elem.offsetParent == elem.parentNode ? elem.offsetTop: this.getDomObjABSY(elem) - this.getDomObjABSY(elem.parentNode);
	},
	init: function(id, istop) {
		this.load(id, istop);
	},
	getObjTop: function(elem) {
		return elem.getBoundingClientRect ? elem.getBoundingClientRect().top: this.getDomObjABSY(elem);
	},
	muLoad: function(ids, istop) {
		var ids = ids.toString().indexOf(',') > 0 ? ids.split(',') : [ids];
		for (var i = 0; i < ids.length; i++) {
			this.load(ids[i], istop);
		}
	},
	load: function(id, istop) {
		var top = document.documentElement.clientHeight;
		if (!this.loaded[id]) {
			this.loaded[id] = this.t(this.id(id), "img");
		}
		for (var i = 0; i < this.loaded[id].length; i++) {
			var img = this.loaded[id][i];
			if (img.attributes["loadsrc"]) {
				if (img.src.indexOf('noimg') != -1) {
					if (top >= this.getObjTop(img) || !istop) {
						var osrc = img.attributes["loadsrc"].nodeValue;
						img.src = osrc;
					}
				}
			}
		}
	}
}
var xquery_animate = function(elem, x, y, speed, callback) {
	var elem = Fn.isObject(elem) ? elem.id: elem;
	var obj = Fn.obj(elem);
	if (!obj) return false;
	if (obj.movement) {
		clearTimeout(obj.movement);
	};
	var xpos = Fn(obj).css('left');
	var ypos = Fn(obj).css('top');
	if ((xpos == 0 || xpos == 'auto') && (!Fn.isEmpty(x))) {
		obj.style.left = "0px";
	};
	if ((ypos == 0 || ypos == 'auto') && (!Fn.isEmpty(y))) {
		obj.style.top = "0px";
	};
	var xpos = parseInt(Fn(obj).css('left'));
	var ypos = parseInt(Fn(obj).css('top'));
	var callback = callback ? callback: false;
	if ((Fn.isEmpty(x) && Fn.isEmpty(y)) || (Fn.isUndefined(x) && Fn.isUndefined(y))) {
		return true;
	};
	if (Fn.isEmpty(y) || Fn.isUndefined(y)) {
		x = parseInt(x);
		if (xpos == x) {
			return callback ? callback() : true;
		}
	} else if (Fn.isEmpty(x) || Fn.isUndefined(x)) {
		y = parseInt(y);
		if (ypos == y) {
			return callback ? callback() : true;
		}
	} else {
		y = parseInt(y);
		x = parseInt(x);
		if (xpos == x && ypos == y) {
			return callback ? callback() : true;
		}
	};
	var offset = 10;
	if (!Fn.isEmpty(x) && !Fn.isUndefined(x)) {
		if (xpos < x) {
			var dist = Math.ceil((x - xpos) / offset);
			xpos = xpos + dist;
		}
		if (xpos > x) {
			var dist = Math.ceil((xpos - x) / offset);
			xpos = xpos - dist;
		}
		obj.style.left = xpos + "px";
	};
	if (!Fn.isEmpty(y) && !Fn.isUndefined(y)) {
		if (ypos < y) {
			var dist = Math.ceil((y - ypos) / offset);
			ypos = ypos + dist;
		}
		if (ypos > y) {
			var dist = Math.ceil((ypos - y) / offset);
			ypos = ypos - dist;
		}
		obj.style.top = ypos + "px";
	};
	var repeat = "xquery_animate('" + elem + "','" + x + "','" + y + "'," + speed + "," + callback + ")";
	obj.movement = setTimeout(repeat, speed);
}